" vimrc by Lowe Thiderman (daethorian@ninjaloot.se)
" Released under the WTFPL (http://sam.zoy.org/wtfpl/).

" Once upon a time based on MetaCosms vimrc
" (http://www.vi-improved.org/vimrc.php)

" Basics {
    set nocompatible  " disable horrible vi compatability mode!
    set background=dark  " we are using a dark background
    set hidden " use useable buffers
    syntax enable
" }
" General {
    set history=100 " How many lines of history to remember
    set iskeyword+=_,$,@,%,# " none of these should be word dividers
    set nostartofline " leave my cursor where it was
    set backspace=indent,eol,start
    set gdefault " always replace everything when substituting
    set autoread " reload files that has changed externally
    set ttyfast " Oh, right, this isn't the 70s
" }
" Pathogen {
    call pathogen#infect()
    call pathogen#helptags()
" }
" Filetypes {
    au Filetype python setlocal foldmethod=indent expandtab
    au Filetype python setlocal makeprg=pep8\ -r\ %
    au Filetype python syn keyword Special self
    au BufWritePost *.py silent! !{if [[ -f /tmp/gunicorn.pid ]]; then kill -HUP `cat /tmp/gunicorn.pid` &> /dev/null ; fi}

    au Filetype xhtml,html,htmldjango setlocal foldmethod=indent expandtab

    au Filetype javascript syn keyword Special $

    au FileType help nnoremap <buffer> <Enter> <C-]>

    au FileType pytest setlocal nolist
    au! BufRead,BufNewFile *.json set filetype=json
    augroup json_autocmd
        autocmd!
        autocmd FileType json set autoindent
        autocmd FileType json set formatoptions=tcq2l
        autocmd FileType json set textwidth=78 shiftwidth=4
        autocmd FileType json set softtabstop=2 tabstop=8
        autocmd FileType json set expandtab
        autocmd FileType json set foldmethod=syntax
    augroup END
" }
" Files/Backups (XDG style) {
    set viminfo='100,<50,s10,h,!,n~/.cache/vim/viminfo
    set backup " make backup file
    set backupdir=~/.cache/vim/backup " where to put backup file
    set directory=~/.cache/vim/tmp// " directory is the directory for temp file

    " Autocreate the needed directories if they don't exist
    if isdirectory(&directory) == 0
        silent! !mkdir -p "$HOME/.cache/vim/backup"
        silent! !mkdir -p "$HOME/.cache/vim/tmp"
    endif
" }
" Vim UI {
    set showcmd " show the command being typed
    set wildmenu " turn on wild menu

    " XXX: This one breaks in 7.3.138 for some reason
    set wildmode=list:longest " turn on wild menu in special format (long format)
    set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc,*.mo,*.swp,*.jpg,*.gif,*.png,*__pycache__*,*egg* " ignore some formats
    set splitbelow " Split below
    set splitright " Split to the right
    set cmdheight=1 " the command bar is 1 high
    set number " turn on line numbers
    set lazyredraw " do not redraw while running macros (much faster)
    set noerrorbells " don't make noise
    set laststatus=2 " always have the statusline
    set scrolljump=9 " don't scroll the edges
" }
" Visual Cues {
    if exists('+colorcolumn')
        set colorcolumn=+1 " Show a colored column one column from &tw
    endif

    set showmatch " show matching brackets
    set hlsearch " highlight searched phrases
    set incsearch " highlight as you type you search phrase
    set scrolloff=5 " Keep 5 lines (top/bottom) for scope
    set sidescrolloff=5 " Keep 5 lines at the side
    set visualbell " don't blink
    set t_vb=
    set report=0 " always report number of lines changed
    set list " Show whitespace characters

    if has("multi_byte")
        set listchars=tab:»\ ,extends:›,precedes:‹,trail:·,nbsp:✂
        let &sbr = nr2char(8618).' ' " Show ↪ at the beginning of wrapped lines
    else
        set listchars=tab:>\ ,extends:>,precedes:<,trail:-,nbsp:%
    endif
" }
" Indent Related {
    set softtabstop=4 " unify
    set shiftwidth=4 " unify
    set tabstop=4 " real tabs should be 4, but they will show with set list on
    set copyindent " follow the conventions laid before us
    set expandtab " do not use tabs

    let g:pyindent_open_paren = &sw " Just add one shiftwidth when indenting python
    filetype plugin indent on " load filetype plugins and indent settings
" }
" Text Formatting/Layout {
    set formatoptions=tcrq " See Help (complex)
    set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
    set nowrap " do not wrap line
    set preserveindent " but above all -- follow the conventions laid before us
    set ignorecase " case insensitive by default
    set smartcase " if there are caps, go case-sensitive
    set completeopt=menu,longest,preview " improve the way autocomplete works
    set textwidth=79 " use the universal convention as a default

    " Kill whitespace on save
    au BufWritePre * let pos=getpos('.')|silent! %s/\s\+$//e|call setpos('.',pos)
" }
" Spelling {
    if has('spell')
        au filetype mail set spell spelllang=sv
        au filetype *commit* set spell spelllang=en
    endif
" }
" Folding {
    set foldenable " Turn on folding
    set foldmarker={,} " Fold C style code
    set foldcolumn=0 " No foldcolumn plx
    set foldmethod=marker " Fold on the marker
    set foldopen=undo,search,jump,hor,tag,mark,quickfix,block " open folds when you do stuff

    if $USER == 'daethorian' || $USER == 'bender'
        set foldlevel=0 " Open files with folds closed
    else
        set foldlevel=100 " Open files with folds opened
    endif

    set foldtext=FoldWithLines() " See local/functions.vim

    au FileType json setlocal foldlevel=100
" }
" Colorschemes {
    if has('gui') || &t_Co == 256
        let g:force_lofi = 0
        colorscheme neverland
    else
        let g:force_lofi = 1
        colorscheme ninjaloot
    endif

    " Always include the right highlights
    au ColorScheme * runtime local/highlights.vim
" }
" GUI {
    if has('gui_running')
        if $USER == 'daethorian' || $USER == 'bender'
            " These are settings that as closely as possible mimics terminal
            " vim.
            set guioptions=cagit  " Disable graphical elements
            set guifont=Inconsolata\ 13 " hax0r font

            " No blinking cursor plz :(
            set guicursor=n-v-c:blinkon0-block-Cursor/lCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor-blinkon0

            set sj=0 " Scrolljump isn't needed here
            let g:Powerline_symbols = 'fancy'
        endif
    endif
" }

" Load the local vim rc files
for f in split(globpath(&runtimepath, 'local/*.vim'), "\n")
    execute 'source ' . f
endfor

" Load user specific settings
let userfile = globpath(&runtimepath, 'local.vim')
if filereadable(userfile)
    execute 'source ' . userfile
endif

" vim: set et:sw=4:fmr=marker:fdm={,}
