# zshrc by Lowe Thiderman (lowe.thiderman@gmail.com)
# Released under the WTFPL (http://sam.zoy.org/wtfpl/).
# https://github.com/thiderman/conf-zsh

# Colors {{{
c=()
c+="%F{237}"  # 1.  Prompt decoration
c+="%F{143}"  # 2.  Hostname
c+="%F{160}"  # 3.  Hostname root
c+="%F{067}"  # 4.  Directory
c+="%F{096}"  # 5.  Directory non-multi
c+="%F{196}"  # 6.  Error
c+="%F{184}"  # 7.  Jobs
c+="%F{067}"  # 8.  Clock
c+="%F{195}"  # 9.  Mail
c+="%F{062}"  # 10. Battery percent
c+="%F{063}"  # 11. Battery timeleft
c+="%F{196}"  # 12. TMOUT
c+="%F{066}"  # 13. CVS System
c+="%F{214}"  # 14. CVS Repo
c+="%F{083}"  # 15. CVS Clean
c+="%F{160}"  # 16. CVS Unstaged
c+="%F{095}"  # 17. CVS Action
c+="%F{202}"  # 18. CVS Staged / Debug
c+="%F{120}"  # 19. Enabled / Success
c+="%F{240}"  # 20. Disabled
c+="%F{067}"  # 21. Doc: Function
c+="%F{240}"  # 22. Doc: Undocumented
c+="%F{148}"  # 23. Doc: File
c+="%F{048}"  # 24. Comp: Descriptions
c+="%F{067}"  # 25. Comp: Directories
c+="%F{196}"  # 26. Comp: Corrections
c+="%F{045}"  # 27. IP Adress
c+="%F{123}"  # 28. CVS Super repo

export c
# }}}
# External modules {{{

# zsh-filedb. Quickfast!
source $ZSHCONFDIR/modules/filedb/zsys.zsh

if [[ $(echotc Co) = 256 ]]; then
  # Shell syntax highlighting, in realtime.
  source $ZSHCONFDIR/modules/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

  export ZSH_HIGHLIGHT_STYLES[alias]='fg=87,bold'
  export ZSH_HIGHLIGHT_STYLES[command]='fg=103,bold'
  export ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=103,bold'
  export ZSH_HIGHLIGHT_STYLES[precommand]='fg=110,bold'
  export ZSH_HIGHLIGHT_STYLES[builtin]='fg=65,bold'
  export ZSH_HIGHLIGHT_STYLES[function]='fg=215,bold'
  export ZSH_HIGHLIGHT_STYLES[path]='fg=68,bold'
  export ZSH_HIGHLIGHT_STYLES[assign]='fg=43'

  export ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=87'
  export ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=132'
  export ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=107,bold'
  export ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=107,bold'

  # Really extensive LS_COLORS.
  if (( $+commands[dircolors] )) ; then
    eval $(dircolors -b $ZSHCONFDIR/modules/LS_COLORS/LS_COLORS)
  fi
fi

# }}}
# Basic configuration {{{

# ls {{{

alias l='command ls -bhv --group-directories-first '${ls_options:+"${ls_options[*]}"}
alias ls='ls -lbhv --group-directories-first '${ls_options:+"${ls_options[*]}"}

# }}}
# aliases {{{

# grml sets ag to be aliased to "sudo apt-get". This is annoying when you want
# to use the silver searcher, whose binary is called, you guessed it, ag.
if alias ag &> /dev/null; then
  unalias ag
fi

alias zz="source $ZSHRC"
alias sp="python setup.py"
alias hc="herbstclient"

alias :q="exit"
alias bell='echo -en "\007"'

alias spa="sudo sppuppet agent -t"
alias sps="sudo sppuppet status"
alias spcb="sudo sppuppet change-branch"

alias j='ssh j'

# }}}
# chpwd {{{

# sshfs {{{
function __autosshfs_mount() {
  if [[ $PWD = $2 ]] && [[ ! -d "$3" ]]; then
    dir=$2:t
    echo "sshfs-automount: $dir"

    cd -q ..
    sshfs $1 $2 -o allow_other
    cd $2
    export AUTO_SSHFS="$2" \
           AUTO_SSHFS_NAME="$dir"
  fi
}

function _autosshfs() {
  ssh="$HOME/ssh"
  nl="$ssh/ninjaloot"
  wrz="$ssh/warez"

  # Check with trailing slash so that we only match things actually below it
  if [[ $PWD =~ $ssh/ ]] && [[ -z "$AUTO_SSHFS" ]]; then
    # In ssh dir and nothing mounted. Do stuff!
    __autosshfs_mount nl: $nl $nl/etc
    __autosshfs_mount nl:/warez $wrz $wrz/mp3

  elif [[ ! $PWD =~ $ssh/ ]] && [[ -n "$AUTO_SSHFS" ]]; then
    # No longer in ssh - unmount the mounted one
    echo "sshfs-unmount: $AUTO_SSHFS_NAME"

    fusermount -u $AUTO_SSHFS
    export AUTO_SSHFS="" \
           AUTO_SSHFS_NAME=""
  fi
}

# }}}
# virtualenv {{{

# Auto source/unsource of virtualenvs
function _autovenv() {
  cur=${1:-$PWD}
  f="bin/activate"

  # Find upwards and look for a $f. If it is found, source it.
  until [[ -z "$cur" ]]; do
    if [[ -f "$cur/$f" ]]; then
      if [[ -z "$VIRTUAL_ENV" ]]; then
        source $cur/$f
        export VENV_PROMPT="%B${c[24]}venv${c[1]}:"
      fi
      return
    fi
    cur=${cur%/*}
  done

  # If set and no longer inside a virtualenv, deactivate it.
  if [[ -n "$VIRTUAL_ENV" ]]; then
    export VENV_PROMPT=''
    deactivate
  fi
}
_autovenv

# }}}
# workgit {{{

# Set work email as user.email and copy the fucking Gerrit hook into place
function _autoworkgit() {
  local gerrit="$HOME/.git_template/gerritplsgodie/commit-msg"
  local hook=".git/hooks/commit-msg"
  local auto='%F{71}%BAuto%b%f'

  # If this is not a git repo or the conditions are not set up, bail
  if [[ -z "$WORK_EMAIL" ]] || [[ -z "$WORK_REMOTE" ]] || [[ ! -r .git ]]; then
    return
  fi

  local remote=$(git config remote.origin.url)
  # If the origin remote does not point to the $WORK_REMOTE, bail
  if [[ ! $remote =~ $WORK_REMOTE ]]; then
    return
  fi

  if [[ ! $(git config user.email) =~ $WORK_EMAIL ]]; then
    print -P "$auto: Set email to work email"
    git config user.email "$WORK_EMAIL"
  fi

  if [[ $remote =~ 'ghe' ]]; then
    if [[ ! $(git config hub.host) =~ $WORK_REMOTE ]]; then
      print -P "$auto: yay ghe"
      git config hub.host ghe.spotify.net
    fi
  elif [[ ! -f $hook ]] && [[ -f $gerrit ]] && ; then
    # XXX: Will not work with new-style submodules. Fak u submodules.
    print -P "$auto: fak u gerrit"
    cp -p $gerrit $hook
  fi
}

# }}}

function chpwd() {
  if [[ -z "$ZSH_NO_CHPWD" ]]; then
    ls
  fi

  _autovenv
  _autosshfs
  _autoworkgit
}

# }}}
# global aliases {{{

alias -g J="| python -m json.tool"
alias -g JC="| python -m json.tool | pygmentize -l json"
alias -g G="| grep -i"
alias -g M="| most"
alias -g L="| less"
alias -g X="| xargs"
alias -g H="| head"
alias -g T="| tail"
alias -g S="| sort"
alias -g SU='| sort -u'
alias -g SN='| sort -n'
alias -g SNR='| sort -nr'
alias -g W="| wc -l"
alias -g E="&| exit"
alias -g EE="&& exit"
alias -g N="&> /dev/null"
alias -g 1N="1> /dev/null"
alias -g 2N="2> /dev/null"

# }}}
# navigation {{{

autoload -U split-shell-arguments

function rationalise-dot() {
  local reply REPLY REPLY2
  if [[ $_IS_PASTING = 1 ]]; then
    zle self-insert
    return
  fi
  #local MATCH
  if [[ $LBUFFER =~ '(^|/| |  |'$'\n''|\||;|&)\.\.$' ]]; then
    LBUFFER+=/
    zle self-insert
    zle self-insert

    split-shell-arguments
    (( REPLY -= 1 ))  # The actual $REPLY is whitespace. See doc for ssa.
    zle -M ${reply[$REPLY]:a}
  else
    zle self-insert
  fi
}

zle -N rationalise-dot
bindkey . rationalise-dot
# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert

# 1. Normal cd
# 2. Create a directory if it doesn't exist
# 3. If target is a file, go to parent directory
function cd () {
  local opt=""
  if [[ ${+2} = 0 ]]; then
    if [[ -f $1 ]]; then
      builtin cd $opt $1:h
    else
      if ! builtin cd $opt $1 && [[ $#@ -eq 1 && ! -d $1 ]]; then
        echo -En "cd: $1 doesn't exist, do you want to create it? [y/N] "
        read -sq && mkcd $1
      fi
    fi
  else
    if [[ -z $3 ]]; then
      builtin cd $opt "$1" "$2"
    else
      echo cd: too many arguments
    fi
  fi
}

# Greh; this only works on very recent zshs! Check if chpwd_recent_dirs
# actually is loadable!
a=( ${^fpath}/chpwd_recent_dirs(N) )
if (( $#a > 0 )); then
  autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs

  alias cdl="cdr -l"

  zstyle ':completion:*:*:cdr:*:*' menu selection
  zstyle ':chpwd:*' recent-dirs-file $XDG_DATA_HOME/zsh/cdr
  zstyle ':chpwd:*' recent-dirs-max 21
fi

zle -N _inline-updir
zle -N _inline-back
zle -N _inline-ls
zle -N _inline-dirs

# ZLE hax0r navigation
function _inline-updir() {
  pushd -q ..
  _inline-precmd
}
function _inline-back() {
  if ! popd -q; then
    zle -M 'Directory stack empty'
    sleep 0.5
  fi
  _inline-precmd
}
function _inline-ls() {
  echo
  ls
  zle .reset-prompt
}
function _inline-dirs() {
  echo
  dirs -pv
  zle .reset-prompt
}

function _inline-precmd() {
  _autovenv
  _find_git_root
  zle .reset-prompt
}


bindkey "^[h" _inline-updir
bindkey "^[j" _inline-ls
bindkey "^[k" _inline-dirs
bindkey "^[l" _inline-back

# }}}
# search {{{

function _clearbelowprompt() {
  zle -M ""
}

function _show_surroundings() {
  (( $LINES < 5 )) && { zle -M ""; return }
  local bound line
  typeset -a output
  typeset -A star
  bound=${NUMERIC:-$(( LINES < 10 ? 1 : LINES / 3 ))}
  star[$HISTNO]="* "
  for ((i = HISTNO - $bound; i < HISTNO + $bound && i < HISTCMD; i++)); do
    line="${${:-$star[$i]$i: $history[$i]}[1,COLUMNS-1]}"
    while (( ${(m)#line} > COLUMNS-1 )); do
    line[-1]=
    #for broken zsh#line=$line[1,-2]
    done
    output=( $line $output )
  done
  zle -M ${(pj:\n:)output}
}
zle -N zle-isearch-update _show_surroundings
zle -N zle-isearch-exit _clearbelowprompt

# }}}
# zle hax {{{

# Back one step in a path
function dirname-previous-word () {
  autoload -U modify-current-argument
  modify-current-argument '${ARG:h}'
}

# Make an arguments path be absolute. Will resolve symlinks.
function abs-previous-word () {
  autoload -U modify-current-argument
  modify-current-argument '${ARG:A}'
}

zle -N abs-previous-word
zle -N dirname-previous-word
bindkey '^[s' abs-previous-word
bindkey '^[d' dirname-previous-word

# Edit current commandline with actual editor
autoload -U   edit-command-line
zle -N        edit-command-line
bindkey '^[e' edit-command-line

# Use kicker as a Ctrl-O operator
kicker-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER != kicker\ * ]]; then
        BUFFER="kicker -ce \"$BUFFER\""
        CURSOR=$(( CURSOR+12 ))
    fi
    _zsh_highlight
}
zle -N kicker-command-line
bindkey '^Ok' kicker-command-line

# Use selecta to go to a dir
selecta-command-line() {
  cd $(fd | selecta)
  clear

  # TODO: Learn how to retrigger so that git prompt is re-added
  zle .reset-prompt
}
zle -N selecta-command-line
bindkey '^[c' selecta-command-line

# }}}

# }}}
# Application specific {{{

# find {{{

function f() {
  find 2>/dev/null | grep -is "$1"
}

function fd() {
  find 2>/dev/null -type d | grep -v '\.git' | grep -is "$1"
}

# Global grep. Searches files for content.
function gg() {
  grep "$*" * -ERIins
}

# }}}
# git {{{

# Committing / General
alias ga='git add'
alias gs='git status'
alias s='git status --short'
alias gc='git commit'
alias gca='gc --amend'
alias gp='git push'

alias gu="git pull"

# Branching (only really useful with -v, really)
alias gb='git branch -v'
alias gba='git branch -av'
alias gbv='git branch -vv'
alias gsb='git show-branch'

# Fetching
alias gf='git fetch'
alias gfa='git fetch -a'

# Remotes
alias gre='git remote -v'
alias gra='git remote add'

# Checkouting
alias go='git checkout'
alias goo='git checkout --ours'
alias got='git checkout --theirs'

# Stashing
alias gt="git stash"
alias gtl="git stash list"
alias gtp="git stash pop"

# Submodules
alias gsa='git submodule add'
alias gsi='git submodule update --init'
alias gsu='git submodule update'

# Diffing
alias gd='git diff'
alias gdh='git diff HEAD'

# Merging
alias gm="git merge"
alias gls="git ls-files"
alias glsu="git ls-files --unmerged"
alias glsm="git ls-files --modified"
alias glss="git ls-files --stage"
alias glsd="git ls-files --deleted"
alias grb='git rebase'

# Logging
alias gl='git lg'
alias gll='git log --abbrev-commit --decorate --stat'
alias glc="git shortlog --summary --numbered"
alias glr="git reflog"

alias gau='git update-index --assume-unchanged'

# wow
alias wow="git status"
alias such="git"
alias very="git"
alias so="git"

# Relatively go up to a repository root
function gr() {
  cur=$PWD
  found=false
  is_in=false
  if [[ -n "$1" ]]; then
    msg="zle -M"
  else
    msg="echo"
  fi

  if [[ -r "$cur/.git" ]]; then
    is_in=true
    cur=${cur%/*}
  fi

  until [[ -z "$cur" ]]; do
    if [[ -r "$cur/.git" ]]; then
      found=true
      break
    fi
    cur=${cur%/*}
  done

  if $found; then
    if $is_in; then
      ${(z)msg} "In submodule: going to superproject"
    fi

    [[ -n "$1" ]] && pushd -q $cur || cd $cur
  elif [[ -d "$PWD/.git" ]]; then
    ${(z)msg} "Already at project root"
  else
    ${(z)msg} "Error: Currently not in a git repository"
  fi
}

function _find_git_root() {
  # Helper that finds the real git root.
  # Useful when relatively needing data from a new-style submodule.
  cur=${1:-$PWD}
  until [[ -z "$cur" ]]; do
    if [[ -f "$cur/.git" ]]; then
      # New-style submodules are files
      rel=${${(s: :)"$(<$cur/.git)"}[2]}
      if [[ "$rel" =~ "^../" ]]; then
        # Relative relative! D:
        combined="$cur/$rel"
        git_root=$combined:A
      else
        # Absolute relative.
        git_root=$rel
      fi

      break
    elif [[ -d "$cur/.git" ]]; then
      git_root="$cur/.git"
      break
    fi
    cur=${cur%/*}
  done

  if [[ "$git_root" = "/" ]]; then
    git_root=""
  fi
}

# Set up hub as an alias for git if it is installed
if (( $+commands[hub] )) ; then
  alias git=hub
  if type compdef >/dev/null; then
    compdef hub=git
  fi
fi

# }}}
# spotify  {{{

# Uncomment these to use GitHub Enterprise instead of Gerrit.
# Note that you need the ghe_repos.py script for this.
# export SP_REPO_CMD="gherepo"
export SP_REPO_HOST="ghe.spotify.net"

function spclone() {
  host=${SP_REPO_HOST:-git.spotify.net}
  repo=$1 ; shift

  if [[ $host = "ghe.spotify.net" ]]; then
    # If Github Enterprise, we need to use the git user for the clone
    host=git@${host}
  fi
  git clone $host:$repo $*
}

function _repo_complete() {
  local host file now cmd
  host=${SP_REPO_HOST:-git.spotify.net}
  file=${SP_REPO_FILE:-$HOME/.spclone_cache}
  now=$(date +'%s')
  cmd=${SP_REPO_CMD:-"ssh $host gerrit ls-projects"}

  # Use a simple cache to speed things up.
  # export SP_REPO_CACHE=0 to force refresh.
  if [[ ! -f $file ]] || [[ $(($now - ${SP_REPO_CACHE:-0})) -gt 300 ]]; then
    ${(z)cmd} 2> /dev/null > $file
    export SP_REPO_CACHE=$now
  fi

  reply=($(<$file))
}

compctl -K _repo_complete spclone

function sppip() {
    pip install -i http://pypi.spotify.net/simple/ $*
}

# }}}

# }}}
# Prompt setup {{{

for x in user at host path percent; do
  zstyle ":prompt:grml:left:items:$x" post '%f%b'
done

for x in user at host; do
  zstyle ":prompt:grml:left:items:$x" pre '%B%F{143}'
done

zstyle ':prompt:grml:left:items:path' pre '%B%F{68}'
zstyle ':prompt:grml:left:items:path' token '%40<..<%~%<< '
zstyle ':prompt:grml:left:items:percent' pre "%B%F{238}$prompt_newline"
zstyle ':prompt:grml:left:items:percent' token "> "
zstyle ':prompt:grml:left:items:vcs' pre '$VENV_PROMPT'
zstyle ':prompt:grml:right:items:sad-smiley' pre '%B%F{196}'

# The zsh linters will give a random error on this if the ${c part is in the
# zstyle command. No idea why, but wth.
zstyle ':vcs_info:*' unstagedstr "%F{160}" # ${c[16]}
zstyle ':vcs_info:*' stagedstr "%F{202}" # ${c[18]}

# zstyle ':vcs_info:git*:*' get-revision true
zstyle ':vcs_info:git*:*' check-for-changes true

local gitformat="%B%F{214}%r%F{237}(%a%F{083}%u%c%b%m%F{237}) " # 14, 15
zstyle ':vcs_info:git*' formats $gitformat
zstyle ':vcs_info:git*' actionformats $gitformat

zstyle ':vcs_info:git*+set-message:*' hooks git-st git-stash git-action

 # Show remote ref name and number of commits ahead-of or behind
function +vi-git-st() {
  local str branch ahead behind remote

  # Store the current branch name
  branch=${hook_com[branch]}

  # Are we on a remote-tracking branch?
  remote=${$(git rev-parse --verify ${branch}@{upstream} \
    --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

  if [[ -n ${remote} ]] ; then
    str=${branch}

    ahead=$(git rev-list ${branch}@{upstream}..HEAD 2>/dev/null | wc -l)
    behind=$(git rev-list HEAD..${branch}@{upstream} 2>/dev/null | wc -l)

    (( $ahead + $behind )) && str+="${c[1]}:"  # Dark colon if any
    (( $ahead )) && str+="${c[15]}+${ahead}%f"  # Ahead
    (( $ahead )) && (( $behind )) && str+="${c[1]}/"  # Dark slash
    (( $behind )) && str+="${c[16]}-${behind}%f"  # Behind
  else
    # Just add a red colon to mark non-tracking branch
    str="${branch}${c[16]}:"
  fi

  hook_com[branch]=$str
}

# Show count of stashed changes
function +vi-git-stash() {
  local -a stashes
  local git_root

  _find_git_root
  if [[ -n "$git_root" ]] && [[ -s $git_root/refs/stash ]] ; then
    stashes=$(git stash list 2>/dev/null | wc -l)
    hook_com[misc]+="${c[1]}:${c[4]}${stashes}st${c[1]}"
  fi
}

# Sexy hook to get purdy action messages
function +vi-git-action() {
  local s="${hook_com[action]}"
  if [[ -n "$s" ]] ; then
    hook_com[action]="${c[6]}omg ${s}!${c[1]}:"
  fi
}

# }}}

local USERFILE="$ZSHCONFDIR/local.zsh"
if [[ -f $USERFILE ]] || [[ -L $USERFILE ]]; then
  source $USERFILE
fi

# wow such shibe. https://github.com/thiderman/doge
if (( $+commands[doge] )) ; then
  doge
fi

# vim: ft=zsh fdm=marker fmr={{{,}}}
