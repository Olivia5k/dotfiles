#!/bin/zsh

setopt nullglob

root="$PWD/.git/snakecharmer"
dir="$root/switches/"
log="$root/snaketest.log"
fifo="$root/fifo"

function run() {
  clear
  opts=" --color=yes --result-log=${log}"
  target='test/'

  for file in $dir/* ; do
    t=$file:t

    if [[ $t == 'file' ]]; then
      target=$(<$file)
      continue
    fi

    # If the file has contents, the switch has a value
    if [[ $(wc -m $file | cut -d\  -f1) -gt 0 ]] ; then
      val="'$(<$file)'"
      if [[ $t =~ '^.$' ]]; then
        opts+=" -$t=$val"
      else
        opts+=" --$t=$val"
      fi
    else
      if [[ $t =~ '^.$' ]]; then
        opts+=" -$t"
      else
        opts+=" --$t"
      fi
    fi
  done

  # If no other traceback reporting is set, use short
  if [[ ! -f $dir/tb ]] ; then
    opts+=" --tb=short"
  fi

  # If there is coverage and we can guess the source code dir, add coverage
  if [[ ! -f $dir/cov ]] && (( $+commands[coverage] )) && [[ -d $PWD/$PWD:t ]]; then
    # If we are not running all the tests, disable coverage
    if [[ ! $opts =~ '-x' ]] && [[ ! $opts =~ '-k' ]]; then
      opts+=" --cov=$PWD:t --cov-report=term-missing"
    fi
  fi

  if [[ $opts =~ '-v' ]]; then
    echo py.test $target ${(z)opts}
  fi

  py.test $target ${(Q)${(z)opts}}
}

if (( ! $+commands[py.test] )) ; then
  print -P "%F{red}%BError%b%f: py.test not found. Did you virtualenv?"
  exit 1
fi

if [[ ! -p $fifo ]]; then
  mkfifo $fifo
fi

print -P "Listening on %F{magenta}%B${fifo}%b%f..."

tail -f $fifo | while read line ; do
  if [[ $line == 'run' ]]; then
    run
  else
    break
  fi
done
