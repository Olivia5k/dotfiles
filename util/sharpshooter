#!/bin/zsh

setopt nullglob

function run() {
  clear
  opts=""
  target='test/'

  # If there are toggle opts from vim, try to access them.
  dir="$PWD/.git/sharpshooter"
  log="${dir}.log"
  for file in $dir/* ; do
    t=$file:t

    if [[ $t == 'file' ]]; then
      target=$(<$file)
      continue
    fi

    # If the file has contents, the switch has a value
    if [[ $(wc -m $file | cut -d\  -f1) -gt 0 ]] ; then
      val="'$(<$file)'"
      if [[ $t =~ '^.$' ]]; then
        opts+=" -$t=$val"
      else
        opts+=" --$t=$val"
      fi
    else
      if [[ $t =~ '^.$' ]]; then
        opts+=" -$t"
      else
        opts+=" --$t"
      fi
    fi
  done

  # If no other traceback reporting is set, use short
  if [[ ! -f $dir/tb ]] ; then
    opts+=" --tb=short"
  fi

  # If there is coverage and we can guess the source code dir, add coverage
  if [[ ! -f $dir/cov ]] && (( $+commands[coverage] )) && [[ -d $PWD/$PWD:t ]]; then
    # If we are not running all the tests, disable coverage
    if [[ ! $opts =~ '-x' ]] && [[ ! $opts =~ '-k' ]]; then
      opts+=" --cov=$PWD:t --cov-report=term-missing"
    fi
  fi

  if [[ $opts =~ '-v' ]]; then
    echo py.test $target ${(z)opts} --color=yes $@
  fi

  py.test $target ${(Q)${(z)opts}} --color=yes $@ | tee $log

  # Store test failures in a separate file
  grep '_ Test' $log | cut -d" " -f2 > $PWD/.git/sharpshooter.index
}

if [[ "$1" == "start" ]]; then
  fifo="$PWD/.git/sharpshooter.fifo"
  if [[ ! -p $fifo ]]; then
    mkfifo $fifo
  fi

  tail -f $fifo | while read line ; do run ; done
else
  target='test/'
  if [[ -n "$1" ]]; then
    target=$1; shift
  fi

  run
fi
